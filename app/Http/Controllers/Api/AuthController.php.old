<?php

namespace App\Http\Controllers\Api;

use App\Role;
use App\User;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;

class AuthController extends Controller
{
    /**
     * Create a new AuthController instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth:api', ['except' => ['login']]);
    }

    /**
     * Get a JWT via given credentials.
     *
     * @return \Illuminate\Http\JsonResponse
     */

    public function register(Request $request){
        $validator = Validator::make($request->all(),[
            'name' => 'required|string|max:100',
            'email' => 'required|email|max:255|unique:users',
            'password' => 'required|string|min:8|max:255|confirmed',
            'password_confirmation' => 'required|string|min:8|max:255',
        ]);

        if($validator->fails()){
            return response()->json([
                'status'=>'error',
                'messages'=>$validator->messages()
            ],200);
        }

        $user = new User;
        $user->fill($request->all());
        $user->password = bcrypt($request->password);
        $user->save();

        return response()->json([
            'status' => 'success',
            'data' => $user
        ], 200);
    }
    
    public function login(Request $request)
    {
        $validator = Validator::make($request->all(),[
            'email' => 'required|email|max:255',
            'password' => 'required|string|min:8|max:255',
        ]);

        if($validator->fails()){
            return response()->json([
                'status' => 'error',
                'messages' => $validator->messages()
            ],200);
        }

        if (!$token = Auth::guard('api')->attempt(['email'=>$request->email, 'password'=>$request->password])){
            return response()->json(['error'=>'Unauthorizedo'], 401);
        }

        return $this->respondWithToken($token);
    }

    /*protected function create(array $data){
        $user = User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password'])
        ]);

        $user->roles()->attach(Role::where('name', 'Usuario')->first());
    }*/

    /**
     * Get the authenticated User.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    /*public function me()
    {
        return response()->json(auth()->user());
    }*/

    /**
     * Log the user out (Invalidate the token).
     *
     * @return \Illuminate\Http\JsonResponse
     */
    /*public function logout()
    {
        auth()->logout();

        return response()->json(['message' => 'Successfully logged out']);
    }*/

    /**
     * Refresh a token.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    /*public function refresh()
    {
        return $this->respondWithToken(auth()->refresh());
    }*/

    /**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function respondWithToken($token)
    {
        return response()->json([
            'access_token' => $token,
            'message' => 'Token entregado',
            'token_type' => 'bearer',
            'expires_in' => Auth::guard('api')->factory()->getTTL() * 60
        ]);
    }
}
